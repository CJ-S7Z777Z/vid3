
import os
import psycopg2
import yt_dlp
import asyncio
import logging
import uuid
from datetime import datetime
import telegram
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)

# –ì–ª–∞–≤–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã (–∏—Ö ID –ø—Ä–æ–ø–∏—Å–∞–Ω—ã –≤ –∫–æ–¥–µ)
ADMIN_CHAT_IDS = [1276928573, 332786197, 1786980999, 228845914]  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–µ ID –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–æ–≤

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
WAITING_ADMIN_ID = 1
WAITING_REMOVE_ADMIN_ID = 2

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
REGULAR_DAILY_LIMIT = int(os.getenv("REGULAR_DAILY_LIMIT"))  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
ADMIN_DAILY_LIMIT = int(os.getenv("ADMIN_DAILY_LIMIT"))    # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

# –°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL
DATABASE_URL = os.getenv("DATABASE_URL")

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def get_db_connection():
    return psycopg2.connect(DATABASE_URL)

# –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def setup_database():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS admins
        (
            chat_id BIGINT PRIMARY KEY
        )
        """
    )
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS video_downloads
        (
            user_id BIGINT,
            date DATE,
            count INTEGER,
            PRIMARY KEY (user_id, date)
        )
        """
    )
    conn.commit()
    conn.close()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏
def is_admin(chat_id):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT * FROM admins WHERE chat_id=%s", (chat_id,))
    result = c.fetchone()
    conn.close()
    return result is not None

def add_admin_to_db(chat_id):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute(
        "INSERT INTO admins (chat_id) VALUES (%s) ON CONFLICT DO NOTHING",
        (chat_id,),
    )
    conn.commit()
    conn.close()

def remove_admin_from_db(chat_id):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("DELETE FROM admins WHERE chat_id=%s", (chat_id,))
    conn.commit()
    conn.close()

def get_admins():
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("SELECT chat_id FROM admins")
    admins = c.fetchall()
    conn.close()
    return [admin[0] for admin in admins]

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–∫–∞—á–∏–≤–∞–Ω–∏–π –≤–∏–¥–µ–æ
def get_daily_download_count(user_id):
    conn = get_db_connection()
    c = conn.cursor()
    today = datetime.utcnow().date()
    c.execute(
        "SELECT count FROM video_downloads WHERE user_id=%s AND date=%s",
        (user_id, today),
    )
    result = c.fetchone()
    conn.close()
    if result:
        return result[0]
    else:
        return 0

def increment_daily_download_count(user_id):
    conn = get_db_connection()
    c = conn.cursor()
    today = datetime.utcnow().date()
    current_count = get_daily_download_count(user_id)
    if current_count == 0:
        c.execute(
            """
            INSERT INTO video_downloads (user_id, date, count)
            VALUES (%s, %s, %s)
            """,
            (user_id, today, 1),
        )
    else:
        c.execute(
            """
            UPDATE video_downloads
            SET count = count + 1
            WHERE user_id=%s AND date=%s
            """,
            (user_id, today),
        )
    conn.commit()
    conn.close()

def get_download_limit(chat_id):
    if chat_id in ADMIN_CHAT_IDS or is_admin(chat_id):
        return ADMIN_DAILY_LIMIT
    else:
        return REGULAR_DAILY_LIMIT

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
async def send_message_with_retry(
    update, text, reply_markup=None, max_retries=3
):
    for attempt in range(max_retries):
        try:
            if reply_markup:
                return await update.message.reply_text(
                    text, reply_markup=reply_markup
                )
            else:
                return await update.message.reply_text(text)
        except (telegram.error.NetworkError, telegram.error.Timeout) as e:
            if attempt == max_retries - 1:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
                return None
            await asyncio.sleep(1)

# –°–ø–∏—Å–æ–∫ —Ç–∞—Ä–∏—Ñ–æ–≤ (–º–æ–∂–Ω–æ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å, –µ—Å–ª–∏ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
tariffs = [
    {"name": "–ù–æ–≤–∏—á–æ–∫", "cost": "900—Ä—É–±", "videos": 500},
    {"name": "–õ—é–±–∏—Ç–µ–ª—å", "cost": "4000—Ä—É–±", "videos": 1000},
    {"name": "–ü—Ä–æ—Ñ–∏", "cost": "7500—Ä—É–±", "videos": 2000},
    {"name": "–ë–∏–∑–Ω–µ—Å", "cost": "14500—Ä—É–±", "videos": 3000},
]

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if chat_id in ADMIN_CHAT_IDS or is_admin(chat_id):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        keyboard = [
            [KeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"), KeyboardButton("–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")],
            [KeyboardButton("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã")],
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await send_message_with_retry(
            update,
            "–ü—Ä–∏–≤–µ—Ç! –í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ, –∏ —è —Å–∫–∞—á–∞–º –µ–≥–æ –¥–ª—è –≤–∞—Å.",
            reply_markup=reply_markup,
        )
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –≤–∏–¥–µ–æ
        await send_message_with_retry(
            update,
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, YouTube, VK –∏–ª–∏ Instagram, –∏ —è —Å–∫–∞—á–∞–º –µ–≥–æ –¥–ª—è –≤–∞—Å.",
        )
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ '–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
async def add_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in ADMIN_CHAT_IDS:
        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True
        )
        await send_message_with_retry(
            update,
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:",
            reply_markup=reply_markup,
        )
        return WAITING_ADMIN_ID
    else:
        await send_message_with_retry(
            update, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return ConversationHandler.END

async def add_admin_id_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        new_admin_chat_id = int(text)
        if new_admin_chat_id not in ADMIN_CHAT_IDS and not is_admin(new_admin_chat_id):
            add_admin_to_db(new_admin_chat_id)
            await send_message_with_retry(
                update,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_chat_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞—á–µ—Å—Ç–≤–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!",
            )
        else:
            await send_message_with_retry(
                update,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {new_admin_chat_id} —É–∂–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            )
    except ValueError:
        await send_message_with_retry(
            update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )
        return WAITING_ADMIN_ID
    await start(update, context)
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ '–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞'
async def remove_admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in ADMIN_CHAT_IDS:
        admins = get_admins()
        if not admins:
            await send_message_with_retry(update, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return ConversationHandler.END

        message = "üìú **–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n\n"
        for i, admin in enumerate(admins, 1):
            message += f"{i}. ID: {admin}\n"

        reply_markup = ReplyKeyboardMarkup(
            [[KeyboardButton("–û—Ç–º–µ–Ω–∞")]], resize_keyboard=True, one_time_keyboard=True
        )

        await send_message_with_retry(
            update,
            f"{message}\n‚ùì –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:",
            reply_markup=reply_markup,
        )
        return WAITING_REMOVE_ADMIN_ID
    else:
        await send_message_with_retry(
            update, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )
        return ConversationHandler.END

async def remove_admin_id_received(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    try:
        admin_chat_id = int(text)
        if is_admin(admin_chat_id) or admin_chat_id in ADMIN_CHAT_IDS:
            remove_admin_from_db(admin_chat_id)
            await send_message_with_retry(
                update,
                f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_chat_id} —É–¥–∞–ª–µ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤!",
            )
        else:
            await send_message_with_retry(
                update,
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {admin_chat_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.",
            )
    except ValueError:
        await send_message_with_retry(
            update, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        )
        return WAITING_REMOVE_ADMIN_ID
    await start(update, context)
    return ConversationHandler.END

# –ö–æ–º–∞–Ω–¥–∞ '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã'
async def show_admins(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    if chat_id in ADMIN_CHAT_IDS:
        admins = get_admins()
        if not admins:
            await send_message_with_retry(update, "‚ùå –ù–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤.")
            return

        message = "üìú **–î–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã:**\n\n"
        for i, admin in enumerate(admins, 1):
            message += f"{i}. ID: {admin}\n"

        await send_message_with_retry(update, message)
    else:
        await send_message_with_retry(
            update, "‚ùå –ö–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –≥–ª–∞–≤–Ω—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤."
        )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
async def delete_video(video_path):
    try:
        if os.path.exists(video_path):
            os.remove(video_path)
            user_video_dir = os.path.dirname(video_path)
            try:
                os.rmdir(user_video_dir)  # –£–¥–∞–ª–∏—Ç—å –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –ø—É—Å—Ç–∞
            except OSError:
                pass  # –ü–∞–ø–∫–∞ –Ω–µ –ø—É—Å—Ç–∞
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤–∏–¥–µ–æ {video_path}: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –≤–∏–¥–µ–æ
async def handle_user_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
    download_limit = get_download_limit(chat_id)
    current_count = get_daily_download_count(user_id)
    if current_count >= download_limit:
        await send_message_with_retry(
            update,
            f"‚ùå –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ª–∏–º–∏—Ç–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π ({download_limit} –≤–∏–¥–µ–æ). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.",
        )
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ
    url = update.message.text.strip()
    if any(
        domain in url
        for domain in ["tiktok.com", "youtube.com", "youtu.be", "vk.com", "instagram.com"]
    ):
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ "–ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞..."
        loading_message = await send_message_with_retry(update, "üîÑ –ò–¥–µ—Ç –∑–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...")
        try:
            # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_video_dir = f"Video{user_id}"
            os.makedirs(user_video_dir, exist_ok=True)

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
            unique_id = uuid.uuid4().hex
            ydl_output_template = f"{user_video_dir}/downloaded_video_{unique_id}.%(ext)s"

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–ø—Ü–∏–∏ –¥–ª—è yt_dlp
            ydl_options = {
                "format": "best",
                "outtmpl": ydl_output_template,
                "quiet": True,
                "socket_timeout": 600,
                "geo_bypass": True,
                "geo_bypass_country": "DE",
                "no_warnings": True,
            }

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Å—ã–ª–∫–∞ Instagram
            if "instagram.com" in url:
                instagram_username = os.getenv("INSTAGRAM_USERNAME")
                instagram_password = os.getenv("INSTAGRAM_PASSWORD")
                if instagram_username and instagram_password:
                    ydl_options["username"] = instagram_username
                    ydl_options["password"] = instagram_password
                else:
                    await send_message_with_retry(
                        update,
                        "‚ùå –î–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–∑ Instagram –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è INSTAGRAM_USERNAME –∏ INSTAGRAM_PASSWORD.",
                    )
                    await loading_message.delete()
                    return

            with yt_dlp.YoutubeDL(ydl_options) as ydl:
                result = ydl.extract_info(url, download=True)
                video_file = ydl.prepare_filename(result)

            await loading_message.delete()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ñ–∞–π–ª
            if os.path.exists(video_file):
                with open(video_file, "rb") as video:
                    await context.bot.send_video(chat_id=chat_id, video=video)
            else:
                await send_message_with_retry(update, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ.")
                return

            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–∫–∞—á–∏–≤–∞–Ω–∏–π
            increment_daily_download_count(user_id)

            # –£–¥–∞–ª—è–µ–º –≤–∏–¥–µ–æ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
            asyncio.create_task(delete_video(video_file))

        except yt_dlp.utils.DownloadError as e:
            await loading_message.delete()
            error_message = str(e).splitlines()[0]  # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏
            await send_message_with_retry(
                update, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ –≤–∏–¥–µ–æ: {error_message}"
            )
        except Exception as e:
            await loading_message.delete()
            await send_message_with_retry(
                update, f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
            )
    else:
        await send_message_with_retry(
            update,
            "‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ –∏–∑ TikTok, YouTube, VK –∏–ª–∏ Instagram.",
        )

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–º–µ–Ω—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start(update, context)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ start
    return ConversationHandler.END  # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    if text == "–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        return await add_admin_start(update, context)
    elif text == "–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
        return await remove_admin_start(update, context)
    elif text == "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã":
        await show_admins(update, context)
    elif text == "–û—Ç–º–µ–Ω–∞":
        await cancel(update, context)
    else:
        await handle_user_message(update, context)  # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –≤–∏–¥–µ–æ

def main():
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    setup_database()

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
    application = (
        ApplicationBuilder()
        .token(BOT_TOKEN)
        .read_timeout(20)
        .write_timeout(20)
        .connect_timeout(20)
        .build()
    )

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
    conv_handler = ConversationHandler(
        entry_points=[
            CommandHandler("start", start),
            MessageHandler(filters.Regex("^(–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)$"), add_admin_start),
            MessageHandler(filters.Regex("^(–£–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞)$"), remove_admin_start),
            MessageHandler(filters.Regex("^(–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã)$"), show_admins),
        ],
        states={
            WAITING_ADMIN_ID: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, add_admin_id_received),
            ],
            WAITING_REMOVE_ADMIN_ID: [
                MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
                MessageHandler(filters.TEXT & ~filters.COMMAND, remove_admin_id_received),
            ],
        },
        fallbacks=[
            CommandHandler("start", cancel),
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
        ],
    )

    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))
    application.add_handler(CommandHandler("start", start))

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
